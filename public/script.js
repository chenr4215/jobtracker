let jobs = [];
let allJobs = []; // ‰øùÂ≠òÂéüÂßãÊï∞ÊçÆÂ§á‰ªΩ
let sortField = null;
let sortDirection = 'asc';

// È°µÈù¢Âä†ËΩΩÊó∂ÂàùÂßãÂåñ
window.onload = () => {
    console.log("È°µÈù¢Âä†ËΩΩÂÆåÊàê");
    document.getElementById("date").value = new Date().toISOString().split("T")[0];

    if (window.firebaseApp && window.firebaseApp.auth) {
        initializeAuthListener();
    } else {
        console.error("Firebase Êú™Ê≠£Á°ÆÂä†ËΩΩÔºÅ");
    }
};

// ÁõëÂê¨Áî®Êà∑ÁôªÂΩïÁä∂ÊÄÅ
function initializeAuthListener() {
    firebaseApp.auth.onAuthStateChanged((user) => {
        console.log("Áî®Êà∑Áä∂ÊÄÅÂèòÂåñ:", user);
        if (user) {
            document.getElementById("loginBtn").style.display = "none";
            document.getElementById("logoutBtn").style.display = "block";
            document.getElementById("userInfo").style.display = "inline";
            document.getElementById("userInfo").textContent = `Ê¨¢ËøéÔºå${user.displayName || user.email}`;
            loadJobs(user.uid);
        } else {
            document.getElementById("loginBtn").style.display = "block";
            document.getElementById("logoutBtn").style.display = "none";
            document.getElementById("userInfo").style.display = "none";
            jobs = [];
            allJobs = [];
            refreshTable();
        }
    });
}

// ‰ªé Firebase Âä†ËΩΩËÅå‰ΩçÊï∞ÊçÆ
function loadJobs(userId) {
    const jobsRef = firebaseApp.ref(firebaseApp.db, `jobs/${userId}`);
    firebaseApp.onValue(jobsRef, (snapshot) => {
        const data = snapshot.val();
        allJobs = data ? Object.values(data) : [];
        jobs = allJobs;
        console.log("Âä†ËΩΩËÅå‰ΩçÊï∞ÊçÆ:", jobs);
        refreshTable();
    });
}

// Google ÁôªÂΩï
async function loginWithGoogle() {
    try {
        const result = await firebaseApp.signInWithPopup(firebaseApp.auth, firebaseApp.provider);
        console.log("ÁôªÂΩïÊàêÂäü:", result.user);
    } catch (error) {
        console.error("ÁôªÂΩïÂ§±Ë¥•:", error.message);
        alert("ÁôªÂΩïÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÊéßÂà∂Âè∞ÔºÅ");
    }
}

// Ê≥®ÈîÄ
async function logout() {
    try {
        await firebaseApp.signOut(firebaseApp.auth);
        console.log("Áî®Êà∑Â∑≤Ê≥®ÈîÄ");
    } catch (error) {
        console.error("Ê≥®ÈîÄÂ§±Ë¥•:", error);
    }
}

// Ê∑ªÂä†ËÅå‰ΩçÔºàÊñ∞Â¢ûÊñá‰ª∂‰∏ä‰º†ÂäüËÉΩÔºâ
async function addJob() {
    const user = firebaseApp.auth.currentUser;
    if (!user) {
        alert("ËØ∑ÂÖàÁôªÂΩïÔºÅ");
        return;
    }

    const jobTitle = document.getElementById("jobTitle").value;
    const company = document.getElementById("company").value;
    const location = document.getElementById("location").value;
    const date = document.getElementById("date").value || new Date().toISOString().split("T")[0];
    const jobNote = document.getElementById("jobNote").value;
    const fileInput = document.getElementById("jobFile");
    let file = fileInput.files[0];

    if (!jobTitle || !company) {
        alert("ËÅå‰ΩçÂêçÁß∞ÂíåÂÖ¨Âè∏ÂêçÁß∞‰∏çËÉΩ‰∏∫Á©∫ÔºÅ");
        return;
    }

    const newJob = {
        id: Date.now(),
        title: jobTitle,
        company: company,
        location: location || "Êú™Áü•",
        date: date,
        note: jobNote,           // Â§áÊ≥®/Ê†áÁ≠æÂ≠óÊÆµ
        status: "applied"
    };

    // Â¶ÇÊûúÈÄâÊã©‰∫ÜÊñá‰ª∂ÔºåÂàô‰∏ä‰º†Âà∞ Firebase Storage
    if (file) {
        try {
            const storage = firebaseApp.storage;
            const fileRef = firebaseApp.storageRef(storage, `jobs/${user.uid}/${newJob.id}/${file.name}`);
            await firebaseApp.uploadBytes(fileRef, file);
            const downloadURL = await firebaseApp.getDownloadURL(fileRef);
            newJob.attachment = downloadURL;
        } catch (error) {
            console.error("Êñá‰ª∂‰∏ä‰º†Â§±Ë¥•:", error);
            alert("Êñá‰ª∂‰∏ä‰º†Â§±Ë¥•ÔºÅ");
        }
    }

    try {
        await firebaseApp.set(
            firebaseApp.ref(firebaseApp.db, `jobs/${user.uid}/${newJob.id}`),
            newJob
        );
        console.log("ËÅå‰ΩçÊ∑ªÂä†ÊàêÂäü:", newJob);
        clearInputs();
        // Êï∞ÊçÆÊõ¥Êñ∞Áî± Firebase onValue Ëá™Âä®Âà∑Êñ∞
    } catch (error) {
        console.error("Êï∞ÊçÆ‰øùÂ≠òÂ§±Ë¥•:", error);
    }
}

// Âà∑Êñ∞ËÅå‰ΩçË°®Ê†ºÔºàÂåÖÂê´ÈôÑ‰ª∂È¢ÑËßàÔºâ
function refreshTable() {
    const tbody = document.getElementById("tableBody");
    tbody.innerHTML = jobs
        .map(
            (job) => `
            <tr>
                <td>${job.title}</td>
                <td>${job.company}</td>
                <td>${job.location}</td>
                <td>${job.date}</td>
                <td>${job.note || ""}</td>
                <td>${job.attachment ? `<a href="${job.attachment}" target="_blank">È¢ÑËßà</a>` : ""}</td>
                <td>
                    <button class="status-btn ${job.status}" onclick="changeStatus('${job.id}')">
                        ${getStatusText(job.status)}
                    </button>
                </td>
                <td>
                    <button onclick="deleteJob('${job.id}')">üóëÔ∏è Âà†Èô§</button>
                </td>
            </tr>`
        )
        .join("");
}

// ÂàáÊç¢ËÅå‰ΩçÁä∂ÊÄÅ
async function changeStatus(jobId) {
    const user = firebaseApp.auth.currentUser;
    if (!user) return;

    const job = jobs.find((j) => j.id === Number(jobId));
    const statusOrder = ["applied", "interview", "rejected", "accepted"];
    const currentIndex = statusOrder.indexOf(job.status);
    job.status = statusOrder[(currentIndex + 1) % statusOrder.length];

    try {
        await firebaseApp.update(
            firebaseApp.ref(firebaseApp.db, `jobs/${user.uid}/${jobId}`),
            { status: job.status }
        );
        console.log("Áä∂ÊÄÅÊõ¥Êñ∞ÊàêÂäü:", jobId, job.status);
        // Êõ¥Êñ∞Áî± Firebase Ëá™Âä®Âà∑Êñ∞
    } catch (error) {
        console.error("Áä∂ÊÄÅÊõ¥Êñ∞Â§±Ë¥•:", error);
    }
}

// Âà†Èô§ËÅå‰Ωç
async function deleteJob(jobId) {
    const user = firebaseApp.auth.currentUser;
    if (!user) return;

    try {
        await firebaseApp.remove(
            firebaseApp.ref(firebaseApp.db, `jobs/${user.uid}/${jobId}`)
        );
        console.log("ËÅå‰ΩçÂà†Èô§ÊàêÂäü:", jobId);
        // Êõ¥Êñ∞Áî± Firebase Ëá™Âä®Âà∑Êñ∞
    } catch (error) {
        console.error("Âà†Èô§Â§±Ë¥•:", error);
    }
}

// ËæÖÂä©ÂáΩÊï∞ÔºöËøîÂõûÁä∂ÊÄÅÊñáÊú¨
function getStatusText(status) {
    const statusMap = {
        applied: "Â∑≤Áî≥ËØ∑",
        interview: "Èù¢ËØïÈÇÄËØ∑",
        rejected: "Â∑≤ÊãíÁªù",
        accepted: "Â∑≤Êé•Âèó",
    };
    return statusMap[status];
}

// Ê∏ÖÁ©∫ËæìÂÖ•Ê°ÜÔºàÂåÖÊã¨Êñá‰ª∂ËæìÂÖ•Ôºâ
function clearInputs() {
    document.getElementById("jobTitle").value = "";
    document.getElementById("company").value = "";
    document.getElementById("location").value = "";
    document.getElementById("date").value = new Date().toISOString().split("T")[0];
    document.getElementById("jobNote").value = "";
    document.getElementById("jobFile").value = "";
}

// ÂØºÂá∫ËÅå‰ΩçÊï∞ÊçÆ‰∏∫ CSV Ê†ºÂºè
function exportData() {
  // ‰ΩøÁî® allJobs ÂØºÂá∫ÊâÄÊúâËÅå‰ΩçÊï∞ÊçÆÔºàÂ¶ÇÊûúÂ∏åÊúõÂØºÂá∫ÂΩìÂâçËøáÊª§ÁªìÊûúÔºåÂèØ‰ΩøÁî® jobs Êï∞ÁªÑÔºâ
  let data = allJobs;
  if (!data || data.length === 0) {
    alert("Ê≤°ÊúâËÅå‰ΩçÊï∞ÊçÆÂèØÂØºÂá∫ÔºÅ");
    return;
  }
  
  // CSV Êñá‰ª∂ÂÜÖÂÆπÔºåÂåÖÂê´Ê†áÈ¢òË°å
  let csvContent = "data:text/csv;charset=utf-8,";
  csvContent += "ËÅå‰ΩçÂêçÁß∞,ÂÖ¨Âè∏,Âú∞ÁÇπ,Áî≥ËØ∑Êó•Êúü,Â§áÊ≥®/Ê†áÁ≠æ,ÈôÑ‰ª∂,Áä∂ÊÄÅ\n";
  
  data.forEach(job => {
    // ÊûÑÈÄ†‰∏ÄË°åÊï∞ÊçÆÔºå‰ΩøÁî®ÂèåÂºïÂè∑ÂåÖË£πÊØè‰∏™Â≠óÊÆµÔºåÈÅøÂÖçÈÄóÂè∑ÂÜ≤Á™Å
    let row = [
      job.title, 
      job.company, 
      job.location, 
      job.date, 
      job.note || "",
      job.attachment ? "ÈôÑ‰ª∂Â∑≤‰∏ä‰º†" : "",
      getStatusText(job.status)
    ].map(item => `"${item}"`).join(",");
    csvContent += row + "\n";
  });
  
  // ÁºñÁ†ÅÂπ∂ÂàõÂª∫‰∏Ä‰∏™ÈöêËóèÁöÑ‰∏ãËΩΩÈìæÊé•
  const encodedUri = encodeURI(csvContent);
  const link = document.createElement("a");
  link.setAttribute("href", encodedUri);
  link.setAttribute("download", "jobs_export.csv");
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

// ÊêúÁ¥¢ÂäüËÉΩÔºà‰ΩøÁî® allJobs Â§á‰ªΩÊï∞ÊçÆËøáÊª§Ôºå‰∏çÁõ¥Êé•‰øÆÊîπÂéüÂßãÊï∞ÊçÆÔºâ
document.getElementById("search").addEventListener("input", (e) => {
    const keyword = e.target.value.toLowerCase();
    if (!keyword) {
        jobs = allJobs;
        refreshTable();
        return;
    }
    jobs = allJobs.filter(
        (job) =>
            job.title.toLowerCase().includes(keyword) ||
            job.company.toLowerCase().includes(keyword)
    );
    refreshTable();
});

// ÊéíÂ∫èÂäüËÉΩÂèäÂä®ÊÄÅÁÆ≠Â§¥Êõ¥Êñ∞
function sortTable(field) {
    if (sortField === field) {
        sortDirection = sortDirection === "asc" ? "desc" : "asc";
    } else {
        sortField = field;
        sortDirection = "asc";
    }

    jobs.sort((a, b) => {
        let valueA = a[field];
        let valueB = b[field];

        if (field === "date") {
            valueA = new Date(valueA).getTime();
            valueB = new Date(valueB).getTime();
            return sortDirection === "asc" ? valueA - valueB : valueB - valueA;
        } else {
            valueA = String(valueA).toLowerCase();
            valueB = String(valueB).toLowerCase();
            if (valueA < valueB) return sortDirection === "asc" ? -1 : 1;
            if (valueA > valueB) return sortDirection === "asc" ? 1 : -1;
            return 0;
        }
    });

    refreshTable();
    updateSortArrows();
}

// Êõ¥Êñ∞ÊéíÂ∫èÁÆ≠Â§¥ÊòæÁ§∫
function updateSortArrows() {
    const arrowUp = "‚Üë";
    const arrowDown = "‚Üì";
    const arrowNeutral = "‚Üï";

    document.getElementById("sortTitle").textContent = arrowNeutral;
    document.getElementById("sortCompany").textContent = arrowNeutral;
    document.getElementById("sortLocation").textContent = arrowNeutral;
    document.getElementById("sortDate").textContent = arrowNeutral;

    switch (sortField) {
        case "title":
            document.getElementById("sortTitle").textContent = sortDirection === "asc" ? arrowUp : arrowDown;
            break;
        case "company":
            document.getElementById("sortCompany").textContent = sortDirection === "asc" ? arrowUp : arrowDown;
            break;
        case "location":
            document.getElementById("sortLocation").textContent = sortDirection === "asc" ? arrowUp : arrowDown;
            break;
        case "date":
            document.getElementById("sortDate").textContent = sortDirection === "asc" ? arrowUp : arrowDown;
            break;
    }
}


// Â≠òÂÇ®Á¶ªÁ∫øÊñ∞Â¢ûÁöÑËÅå‰Ωç
let offlineJobs = []; 

// ÂêØÂä®Êó∂Â∞ùËØï‰ªé localStorage ËØªÂèñÊï∞ÊçÆ
window.addEventListener('load', () => {
  loadLocalData();
  checkOnlineStatus();
});

// ÁõëÂê¨ÁΩëÁªúÁä∂ÊÄÅ
window.addEventListener('online', () => {
  console.log('ÁΩëÁªúÊÅ¢Â§çÂú®Á∫ø');
  syncOfflineJobs();  // ÂêåÊ≠•Á¶ªÁ∫øÊñ∞Â¢ûÁöÑËÅå‰ΩçÂà∞ Firebase
  loadJobs(firebaseApp.auth.currentUser?.uid); // ÈáçÊñ∞Âä†ËΩΩÊúÄÊñ∞ËÅå‰ΩçÊï∞ÊçÆ
});

window.addEventListener('offline', () => {
  console.log('ÂΩìÂâçÂ§Ñ‰∫éÁ¶ªÁ∫øÁä∂ÊÄÅ');
});

// ----------------------
// 1. Êú¨Âú∞Â≠òÂÇ®Áõ∏ÂÖ≥ÂáΩÊï∞
// ----------------------
function saveLocalData() {
  // Â∞Ü allJobs Âíå offlineJobs ÈÉΩÂ≠òÂà∞ localStorage
  localStorage.setItem('allJobs', JSON.stringify(allJobs));
  localStorage.setItem('offlineJobs', JSON.stringify(offlineJobs));
}

function loadLocalData() {
  // ‰ªé localStorage Âä†ËΩΩ
  const storedAllJobs = localStorage.getItem('allJobs');
  const storedOfflineJobs = localStorage.getItem('offlineJobs');

  if (storedAllJobs) {
    allJobs = JSON.parse(storedAllJobs);
    jobs = allJobs.slice(); // Â§çÂà∂Áªô jobs
    refreshTable();
  }

  if (storedOfflineJobs) {
    offlineJobs = JSON.parse(storedOfflineJobs);
  }
}

// ----------------------
// 2. Ê£ÄÊü•ÁΩëÁªúÁä∂ÊÄÅ
// ----------------------
function checkOnlineStatus() {
  if (navigator.onLine) {
    console.log("ÂΩìÂâçÂú®Á∫ø");
  } else {
    console.log("ÂΩìÂâçÁ¶ªÁ∫ø");
  }
}

// ----------------------
// 3. Á¶ªÁ∫øÊó∂Êñ∞Â¢ûËÅå‰Ωç
// ----------------------
async function addJob() {
  const user = firebaseApp.auth.currentUser;
  if (!user) {
    alert("ËØ∑ÂÖàÁôªÂΩïÔºÅ");
    return;
  }

  const jobTitle = document.getElementById("jobTitle").value;
  const company = document.getElementById("company").value;
  const location = document.getElementById("location").value;
  const date = document.getElementById("date").value || new Date().toISOString().split("T")[0];
  const jobNote = document.getElementById("jobNote").value;
  const fileInput = document.getElementById("jobFile");
  let file = fileInput.files[0];

  if (!jobTitle || !company) {
    alert("ËÅå‰ΩçÂêçÁß∞ÂíåÂÖ¨Âè∏ÂêçÁß∞‰∏çËÉΩ‰∏∫Á©∫ÔºÅ");
    return;
  }

  const newJob = {
    id: Date.now(),
    title: jobTitle,
    company: company,
    location: location || "Êú™Áü•",
    date: date,
    note: jobNote,
    status: "applied"
    // attachment: Á≠âÂæÖ‰∏ä‰º†
  };

  // Â¶ÇÊûúÈÄâÊã©‰∫ÜÊñá‰ª∂ÔºåÈúÄË¶ÅÂ§ÑÁêÜÊñá‰ª∂‰∏ä‰º†
  // Ëã•Á¶ªÁ∫øÔºåÊó†Ê≥ï‰∏ä‰º† => ËøôÈáå‰ªÖÊºîÁ§∫ËÆ∞ÂΩïÊñá‰ª∂Âêç
  if (file) {
    newJob.attachmentName = file.name;
  }

  // Â¶ÇÊûúÂΩìÂâçÂú®Á∫øÔºåÁõ¥Êé•Ëµ∞ÂéüÈÄªËæë
  if (navigator.onLine) {
    try {
      // ÂÖà‰∏ä‰º†ÈôÑ‰ª∂ => ÁúÅÁï•
      // ÂÜçÂÜôÂÖ• Firebase
      await firebaseApp.set(
        firebaseApp.ref(firebaseApp.db, `jobs/${user.uid}/${newJob.id}`),
        newJob
      );
      console.log("ËÅå‰ΩçÊ∑ªÂä†ÊàêÂäü:", newJob);
      loadJobs(user.uid); // ÈáçÊñ∞‰ªé Firebase Ëé∑ÂèñÊúÄÊñ∞Êï∞ÊçÆ
    } catch (error) {
      console.error("Êï∞ÊçÆ‰øùÂ≠òÂ§±Ë¥•:", error);
    }
  } else {
    // Â¶ÇÊûúÁ¶ªÁ∫øÔºåÂÖàÂ≠òÂà∞ offlineJobsÔºåÁ≠âÁΩëÁªúÊÅ¢Â§çÂêéÂÜçÁªü‰∏ÄÂêåÊ≠•
    offlineJobs.push(newJob);
    allJobs.push(newJob);
    jobs = allJobs.slice();
    refreshTable();
    console.log("ÂΩìÂâçÁ¶ªÁ∫øÔºåÂ∑≤ÊöÇÂ≠òËÅå‰Ωç:", newJob);
    saveLocalData(); // Êõ¥Êñ∞ localStorage
  }

  clearInputs();
}

// ----------------------
// 4. ÂêåÊ≠•Á¶ªÁ∫øËÅå‰ΩçÂà∞ Firebase
// ----------------------
async function syncOfflineJobs() {
  const user = firebaseApp.auth.currentUser;
  if (!user || offlineJobs.length === 0) return;

  console.log("ÂºÄÂßãÂêåÊ≠•Á¶ªÁ∫øËÅå‰Ωç:", offlineJobs);
  for (let job of offlineJobs) {
    try {
      // Â¶ÇÊûú job.attachmentName Â≠òÂú®ÔºåËØ¥ÊòéÊúâÊñá‰ª∂Ë¶Å‰∏ä‰º†
      // ËøôÈáåÁï•ÂéªÊºîÁ§∫ÔºåÈúÄË¶ÅËá™Â∑±ÂÜô upload ÈÄªËæë
      await firebaseApp.set(
        firebaseApp.ref(firebaseApp.db, `jobs/${user.uid}/${job.id}`),
        job
      );
      console.log("Á¶ªÁ∫øËÅå‰ΩçÂêåÊ≠•ÊàêÂäü:", job);
    } catch (error) {
      console.error("Á¶ªÁ∫øËÅå‰ΩçÂêåÊ≠•Â§±Ë¥•:", error);
    }
  }

  // ÂêåÊ≠•ÂÆåÊàêÂêéÊ∏ÖÁ©∫ offlineJobs
  offlineJobs = [];
  saveLocalData();
  console.log("Á¶ªÁ∫øËÅå‰ΩçÂÖ®ÈÉ®ÂêåÊ≠•ÂÆåÊàê");
}

// ----------------------
// 5. ‰ªé Firebase Âä†ËΩΩËÅå‰Ωç
// ----------------------
function loadJobs(userId) {
  if (!userId) return;
  const jobsRef = firebaseApp.ref(firebaseApp.db, `jobs/${userId}`);
  firebaseApp.onValue(jobsRef, (snapshot) => {
    const data = snapshot.val();
    allJobs = data ? Object.values(data) : [];
    jobs = allJobs.slice();
    console.log("Âä†ËΩΩËÅå‰ΩçÊï∞ÊçÆ:", jobs);
    refreshTable();
    saveLocalData(); // ÊØèÊ¨°Ëé∑ÂèñÊúÄÊñ∞Êï∞ÊçÆÂêéÔºå‰πü‰øùÂ≠ò‰∏Ä‰ªΩÂà∞Êú¨Âú∞
  });
}
